// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package resolver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new resolver API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for resolver API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateResolver adds a resolver

Adds a new resolver section to the configuration file.
*/
func (a *Client) CreateResolver(params *CreateResolverParams, authInfo runtime.ClientAuthInfoWriter) (*CreateResolverCreated, *CreateResolverAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResolverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createResolver",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/resolvers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResolverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateResolverCreated:
		return value, nil, nil
	case *CreateResolverAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteResolver deletes a resolver

Deletes a resolver from the configuration by it's name.
*/
func (a *Client) DeleteResolver(params *DeleteResolverParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteResolverAccepted, *DeleteResolverNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResolverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteResolver",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/resolvers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteResolverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteResolverAccepted:
		return value, nil, nil
	case *DeleteResolverNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetResolver returns a resolver

Returns one resolver section configuration by it's name.
*/
func (a *Client) GetResolver(params *GetResolverParams, authInfo runtime.ClientAuthInfoWriter) (*GetResolverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResolverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResolver",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/resolvers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResolverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResolverOK), nil

}

/*
GetResolvers returns an array of resolvers

Returns an array of all configured resolvers.
*/
func (a *Client) GetResolvers(params *GetResolversParams, authInfo runtime.ClientAuthInfoWriter) (*GetResolversOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResolversParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResolvers",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/resolvers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResolversReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResolversOK), nil

}

/*
ReplaceResolver replaces a resolver

Replaces a resolver configuration by it's name.
*/
func (a *Client) ReplaceResolver(params *ReplaceResolverParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceResolverOK, *ReplaceResolverAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceResolverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceResolver",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/configuration/resolvers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceResolverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceResolverOK:
		return value, nil, nil
	case *ReplaceResolverAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
