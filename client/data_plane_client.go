// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/haproxy-data-plane-api-client/client/cluster"
	"github.com/form3tech-oss/haproxy-data-plane-api-client/client/discovery"
	"github.com/form3tech-oss/haproxy-data-plane-api-client/client/information"
	"github.com/form3tech-oss/haproxy-data-plane-api-client/client/maps"
	"github.com/form3tech-oss/haproxy-data-plane-api-client/client/operations"
	"github.com/form3tech-oss/haproxy-data-plane-api-client/client/reloads"
	"github.com/form3tech-oss/haproxy-data-plane-api-client/client/sites"
	"github.com/form3tech-oss/haproxy-data-plane-api-client/client/specification"
	"github.com/form3tech-oss/haproxy-data-plane-api-client/client/stats"
	"github.com/form3tech-oss/haproxy-data-plane-api-client/client/stick_table"
	"github.com/form3tech-oss/haproxy-data-plane-api-client/client/transactions"
)

// Default data plane HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/v2"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http"}

// NewHTTPClient creates a new data plane HTTP client.
func NewHTTPClient(formats strfmt.Registry) *DataPlane {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new data plane HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *DataPlane {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new data plane client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *DataPlane {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(DataPlane)
	cli.Transport = transport

	cli.Cluster = cluster.New(transport, formats)

	cli.Discovery = discovery.New(transport, formats)

	cli.Information = information.New(transport, formats)

	cli.Maps = maps.New(transport, formats)

	cli.Operations = operations.New(transport, formats)

	cli.Reloads = reloads.New(transport, formats)

	cli.Sites = sites.New(transport, formats)

	cli.Specification = specification.New(transport, formats)

	cli.Stats = stats.New(transport, formats)

	cli.StickTable = stick_table.New(transport, formats)

	cli.Transactions = transactions.New(transport, formats)

	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// DataPlane is a client for data plane
type DataPlane struct {
	Cluster *cluster.Client

	Discovery *discovery.Client

	Information *information.Client

	Maps *maps.Client

	Operations *operations.Client

	Reloads *reloads.Client

	Sites *sites.Client

	Specification *specification.Client

	Stats *stats.Client

	StickTable *stick_table.Client

	Transactions *transactions.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *DataPlane) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.Cluster.SetTransport(transport)

	c.Discovery.SetTransport(transport)

	c.Information.SetTransport(transport)

	c.Maps.SetTransport(transport)

	c.Operations.SetTransport(transport)

	c.Reloads.SetTransport(transport)

	c.Sites.SetTransport(transport)

	c.Specification.SetTransport(transport)

	c.Stats.SetTransport(transport)

	c.StickTable.SetTransport(transport)

	c.Transactions.SetTransport(transport)

}
