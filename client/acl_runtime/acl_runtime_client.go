// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package acl_runtime

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new acl runtime API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for acl runtime API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteServicesHaproxyRuntimeACLFileEntriesID deletes an ACL entry

Deletes the entry from the ACL by its value using the runtime socket.
*/
func (a *Client) DeleteServicesHaproxyRuntimeACLFileEntriesID(params *DeleteServicesHaproxyRuntimeACLFileEntriesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServicesHaproxyRuntimeACLFileEntriesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServicesHaproxyRuntimeACLFileEntriesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteServicesHaproxyRuntimeACLFileEntriesID",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/runtime/acl_file_entries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteServicesHaproxyRuntimeACLFileEntriesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteServicesHaproxyRuntimeACLFileEntriesIDNoContent), nil

}

/*
GetServicesHaproxyRuntimeACLFileEntries returns an ACL entries

Returns an ACL runtime setting using the runtime socket.
*/
func (a *Client) GetServicesHaproxyRuntimeACLFileEntries(params *GetServicesHaproxyRuntimeACLFileEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicesHaproxyRuntimeACLFileEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesHaproxyRuntimeACLFileEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServicesHaproxyRuntimeACLFileEntries",
		Method:             "GET",
		PathPattern:        "/services/haproxy/runtime/acl_file_entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicesHaproxyRuntimeACLFileEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicesHaproxyRuntimeACLFileEntriesOK), nil

}

/*
GetServicesHaproxyRuntimeACLFileEntriesID returns an ACL entry

Returns the ACL entry by its ID using the runtime socket.
*/
func (a *Client) GetServicesHaproxyRuntimeACLFileEntriesID(params *GetServicesHaproxyRuntimeACLFileEntriesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicesHaproxyRuntimeACLFileEntriesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesHaproxyRuntimeACLFileEntriesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServicesHaproxyRuntimeACLFileEntriesID",
		Method:             "GET",
		PathPattern:        "/services/haproxy/runtime/acl_file_entries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicesHaproxyRuntimeACLFileEntriesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicesHaproxyRuntimeACLFileEntriesIDOK), nil

}

/*
GetServicesHaproxyRuntimeAcls returns an array of all ACL files

Returns all ACL files using the runtime socket.
*/
func (a *Client) GetServicesHaproxyRuntimeAcls(params *GetServicesHaproxyRuntimeAclsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicesHaproxyRuntimeAclsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesHaproxyRuntimeAclsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServicesHaproxyRuntimeAcls",
		Method:             "GET",
		PathPattern:        "/services/haproxy/runtime/acls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicesHaproxyRuntimeAclsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicesHaproxyRuntimeAclsOK), nil

}

/*
GetServicesHaproxyRuntimeAclsID returns an ACL file

Returns an ACL file by id using the runtime socket.
*/
func (a *Client) GetServicesHaproxyRuntimeAclsID(params *GetServicesHaproxyRuntimeAclsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetServicesHaproxyRuntimeAclsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesHaproxyRuntimeAclsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServicesHaproxyRuntimeAclsID",
		Method:             "GET",
		PathPattern:        "/services/haproxy/runtime/acls/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicesHaproxyRuntimeAclsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicesHaproxyRuntimeAclsIDOK), nil

}

/*
PostServicesHaproxyRuntimeACLFileEntries adds entry to an ACL file

Adds an entry into the ACL file using the runtime socket.
*/
func (a *Client) PostServicesHaproxyRuntimeACLFileEntries(params *PostServicesHaproxyRuntimeACLFileEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*PostServicesHaproxyRuntimeACLFileEntriesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostServicesHaproxyRuntimeACLFileEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostServicesHaproxyRuntimeACLFileEntries",
		Method:             "POST",
		PathPattern:        "/services/haproxy/runtime/acl_file_entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostServicesHaproxyRuntimeACLFileEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostServicesHaproxyRuntimeACLFileEntriesCreated), nil

}

/*
AddPayloadRuntimeACL adds a new ACL payload

Adds a new ACL payload.
*/
func (a *Client) AddPayloadRuntimeACL(params *AddPayloadRuntimeACLParams, authInfo runtime.ClientAuthInfoWriter) (*AddPayloadRuntimeACLCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddPayloadRuntimeACLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addPayloadRuntimeACL",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/runtime/acl_file_entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddPayloadRuntimeACLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddPayloadRuntimeACLCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
