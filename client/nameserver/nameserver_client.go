// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package nameserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new nameserver API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nameserver API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateNameserver adds a nameserver

Adds a new nameserver to the resolvers section.
*/
func (a *Client) CreateNameserver(params *CreateNameserverParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNameserverCreated, *CreateNameserverAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNameserverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNameserver",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/nameservers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNameserverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateNameserverCreated:
		return value, nil, nil
	case *CreateNameserverAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteNameserver deletes a nameserver

Deletes a nameserver from the resolvers section by it's name.
*/
func (a *Client) DeleteNameserver(params *DeleteNameserverParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNameserverAccepted, *DeleteNameserverNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNameserverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNameserver",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/nameservers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNameserverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteNameserverAccepted:
		return value, nil, nil
	case *DeleteNameserverNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetNameserver returns a nameserver

Returns one nameserver configuration by it's name.
*/
func (a *Client) GetNameserver(params *GetNameserverParams, authInfo runtime.ClientAuthInfoWriter) (*GetNameserverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNameserverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNameserver",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/nameservers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNameserverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNameserverOK), nil

}

/*
GetNameservers returns an array of nameservers

Returns an array of all configured nameservers.
*/
func (a *Client) GetNameservers(params *GetNameserversParams, authInfo runtime.ClientAuthInfoWriter) (*GetNameserversOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNameserversParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNameservers",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/nameservers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNameserversReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNameserversOK), nil

}

/*
ReplaceNameserver replaces a nameserver

Replaces a nameserver configuration by it's name.
*/
func (a *Client) ReplaceNameserver(params *ReplaceNameserverParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceNameserverOK, *ReplaceNameserverAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceNameserverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceNameserver",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/configuration/nameservers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceNameserverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceNameserverOK:
		return value, nil, nil
	case *ReplaceNameserverAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
