// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package spoe_transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new spoe transactions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for spoe transactions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CommitSpoeTransaction commits transaction

Commit transaction, execute all operations in transaction and return msg
*/
func (a *Client) CommitSpoeTransaction(params *CommitSpoeTransactionParams, authInfo runtime.ClientAuthInfoWriter) (*CommitSpoeTransactionOK, *CommitSpoeTransactionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommitSpoeTransactionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "commitSpoeTransaction",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/spoe_transactions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CommitSpoeTransactionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CommitSpoeTransactionOK:
		return value, nil, nil
	case *CommitSpoeTransactionAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeleteSpoeTransaction deletes a transaction

Deletes a transaction.
*/
func (a *Client) DeleteSpoeTransaction(params *DeleteSpoeTransactionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSpoeTransactionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSpoeTransactionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSpoeTransaction",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/spoe_transactions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSpoeTransactionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSpoeTransactionNoContent), nil

}

/*
GetSpoeTransaction returns one s p o e configuration transactions

Returns one SPOE configuration transactions.
*/
func (a *Client) GetSpoeTransaction(params *GetSpoeTransactionParams, authInfo runtime.ClientAuthInfoWriter) (*GetSpoeTransactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSpoeTransactionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSpoeTransaction",
		Method:             "GET",
		PathPattern:        "/services/haproxy/spoe_transactions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSpoeTransactionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSpoeTransactionOK), nil

}

/*
GetSpoeTransactions returns list of s p o e configuration transactions

Returns a list of SPOE configuration transactions. Transactions can be filtered by their status.
*/
func (a *Client) GetSpoeTransactions(params *GetSpoeTransactionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSpoeTransactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSpoeTransactionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSpoeTransactions",
		Method:             "GET",
		PathPattern:        "/services/haproxy/spoe_transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSpoeTransactionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSpoeTransactionsOK), nil

}

/*
StartSpoeTransaction starts a new transaction

Starts a new transaction and returns it's id
*/
func (a *Client) StartSpoeTransaction(params *StartSpoeTransactionParams, authInfo runtime.ClientAuthInfoWriter) (*StartSpoeTransactionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartSpoeTransactionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startSpoeTransaction",
		Method:             "POST",
		PathPattern:        "/services/haproxy/spoe_transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartSpoeTransactionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartSpoeTransactionCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
