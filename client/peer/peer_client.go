// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package peer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new peer API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for peer API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreatePeer adds a peer

Adds a new peer to the configuration file.
*/
func (a *Client) CreatePeer(params *CreatePeerParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePeerCreated, *CreatePeerAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePeerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPeer",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/peer_section",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePeerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreatePeerCreated:
		return value, nil, nil
	case *CreatePeerAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeletePeer deletes a peer

Deletes a peer from the configuration by it's name.
*/
func (a *Client) DeletePeer(params *DeletePeerParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePeerAccepted, *DeletePeerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePeerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePeer",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/peer_section/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePeerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeletePeerAccepted:
		return value, nil, nil
	case *DeletePeerNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetPeerSection returns a peer

Returns one peer configuration by it's name.
*/
func (a *Client) GetPeerSection(params *GetPeerSectionParams, authInfo runtime.ClientAuthInfoWriter) (*GetPeerSectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeerSectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPeerSection",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/peer_section/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPeerSectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPeerSectionOK), nil

}

/*
GetPeerSections returns an array of peer section

Returns an array of all configured peer_section.
*/
func (a *Client) GetPeerSections(params *GetPeerSectionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPeerSectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeerSectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPeerSections",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/peer_section",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPeerSectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPeerSectionsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
