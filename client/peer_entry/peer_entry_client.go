// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package peer_entry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new peer entry API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for peer entry API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreatePeerEntry adds a new peer entry

Adds a new peer entry in the specified peer section in the configuration file.
*/
func (a *Client) CreatePeerEntry(params *CreatePeerEntryParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePeerEntryCreated, *CreatePeerEntryAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePeerEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPeerEntry",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/peer_entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePeerEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreatePeerEntryCreated:
		return value, nil, nil
	case *CreatePeerEntryAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
DeletePeerEntry deletes a peer entry

Deletes a peer entry configuration by it's name in the specified peer section.
*/
func (a *Client) DeletePeerEntry(params *DeletePeerEntryParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePeerEntryAccepted, *DeletePeerEntryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePeerEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePeerEntry",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/peer_entries/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePeerEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeletePeerEntryAccepted:
		return value, nil, nil
	case *DeletePeerEntryNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetPeerEntries returns an array of peer entries

Returns an array of all peer_entries that are configured in specified peer section.
*/
func (a *Client) GetPeerEntries(params *GetPeerEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPeerEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeerEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPeerEntries",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/peer_entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPeerEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPeerEntriesOK), nil

}

/*
GetPeerEntry returns one peer entry

Returns one peer_entry configuration by it's name in the specified peer section.
*/
func (a *Client) GetPeerEntry(params *GetPeerEntryParams, authInfo runtime.ClientAuthInfoWriter) (*GetPeerEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeerEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPeerEntry",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/peer_entries/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPeerEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPeerEntryOK), nil

}

/*
ReplacePeerEntry replaces a peer entry

Replaces a peer entry configuration by it's name in the specified peer section.
*/
func (a *Client) ReplacePeerEntry(params *ReplacePeerEntryParams, authInfo runtime.ClientAuthInfoWriter) (*ReplacePeerEntryOK, *ReplacePeerEntryAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplacePeerEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replacePeerEntry",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/configuration/peer_entries/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplacePeerEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplacePeerEntryOK:
		return value, nil, nil
	case *ReplacePeerEntryAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
