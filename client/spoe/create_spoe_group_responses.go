// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package spoe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/haproxytech/models/v2"
)

// CreateSpoeGroupReader is a Reader for the CreateSpoeGroup structure.
type CreateSpoeGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateSpoeGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCreateSpoeGroupCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateSpoeGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateSpoeGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateSpoeGroupDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateSpoeGroupCreated creates a CreateSpoeGroupCreated with default headers values
func NewCreateSpoeGroupCreated() *CreateSpoeGroupCreated {
	return &CreateSpoeGroupCreated{}
}

/*CreateSpoeGroupCreated handles this case with default header values.

Spoe groups created
*/
type CreateSpoeGroupCreated struct {
	Payload *models.SpoeGroup
}

func (o *CreateSpoeGroupCreated) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/spoe/spoe_groups][%d] createSpoeGroupCreated  %+v", 201, o.Payload)
}

func (o *CreateSpoeGroupCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SpoeGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSpoeGroupBadRequest creates a CreateSpoeGroupBadRequest with default headers values
func NewCreateSpoeGroupBadRequest() *CreateSpoeGroupBadRequest {
	return &CreateSpoeGroupBadRequest{}
}

/*CreateSpoeGroupBadRequest handles this case with default header values.

Bad request
*/
type CreateSpoeGroupBadRequest struct {
	/*Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

func (o *CreateSpoeGroupBadRequest) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/spoe/spoe_groups][%d] createSpoeGroupBadRequest  %+v", 400, o.Payload)
}

func (o *CreateSpoeGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Configuration-Version
	o.ConfigurationVersion = response.GetHeader("Configuration-Version")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSpoeGroupConflict creates a CreateSpoeGroupConflict with default headers values
func NewCreateSpoeGroupConflict() *CreateSpoeGroupConflict {
	return &CreateSpoeGroupConflict{}
}

/*CreateSpoeGroupConflict handles this case with default header values.

The specified resource already exists
*/
type CreateSpoeGroupConflict struct {
	/*Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

func (o *CreateSpoeGroupConflict) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/spoe/spoe_groups][%d] createSpoeGroupConflict  %+v", 409, o.Payload)
}

func (o *CreateSpoeGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Configuration-Version
	o.ConfigurationVersion = response.GetHeader("Configuration-Version")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSpoeGroupDefault creates a CreateSpoeGroupDefault with default headers values
func NewCreateSpoeGroupDefault(code int) *CreateSpoeGroupDefault {
	return &CreateSpoeGroupDefault{
		_statusCode: code,
	}
}

/*CreateSpoeGroupDefault handles this case with default header values.

General Error
*/
type CreateSpoeGroupDefault struct {
	_statusCode int

	/*Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// Code gets the status code for the create spoe group default response
func (o *CreateSpoeGroupDefault) Code() int {
	return o._statusCode
}

func (o *CreateSpoeGroupDefault) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/spoe/spoe_groups][%d] createSpoeGroup default  %+v", o._statusCode, o.Payload)
}

func (o *CreateSpoeGroupDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Configuration-Version
	o.ConfigurationVersion = response.GetHeader("Configuration-Version")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
