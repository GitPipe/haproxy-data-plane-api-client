// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package service_discovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new service discovery API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service discovery API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateAWSRegion adds a new a w s region

Add a new AWS region.
Credentials are not required in case Dataplane API is running in an EC2 instance with proper IAM role attached.
*/
func (a *Client) CreateAWSRegion(params *CreateAWSRegionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAWSRegionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAWSRegionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAWSRegion",
		Method:             "POST",
		PathPattern:        "/service_discovery/aws",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAWSRegionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAWSRegionCreated), nil

}

/*
CreateConsul adds a new consul server

Adds a new Consul server.
*/
func (a *Client) CreateConsul(params *CreateConsulParams, authInfo runtime.ClientAuthInfoWriter) (*CreateConsulCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConsulParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createConsul",
		Method:             "POST",
		PathPattern:        "/service_discovery/consul",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateConsulReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateConsulCreated), nil

}

/*
DeleteAWSRegion deletes an a w s region

Delete an AWS region configuration by it's id.
*/
func (a *Client) DeleteAWSRegion(params *DeleteAWSRegionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAWSRegionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAWSRegionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAWSRegion",
		Method:             "DELETE",
		PathPattern:        "/service_discovery/aws/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAWSRegionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAWSRegionNoContent), nil

}

/*
DeleteConsul deletes a consul server

Deletes a Consul server configuration by it's id.
*/
func (a *Client) DeleteConsul(params *DeleteConsulParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteConsulNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConsulParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteConsul",
		Method:             "DELETE",
		PathPattern:        "/service_discovery/consul/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteConsulReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteConsulNoContent), nil

}

/*
GetAWSRegion returns an a w s region

Return one AWS Region configuration by it's id.
*/
func (a *Client) GetAWSRegion(params *GetAWSRegionParams, authInfo runtime.ClientAuthInfoWriter) (*GetAWSRegionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAWSRegionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAWSRegion",
		Method:             "GET",
		PathPattern:        "/service_discovery/aws/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAWSRegionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAWSRegionOK), nil

}

/*
GetAWSRegions returns an array of all configured a w s regions

Return all configured AWS regions.
*/
func (a *Client) GetAWSRegions(params *GetAWSRegionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAWSRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAWSRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAWSRegions",
		Method:             "GET",
		PathPattern:        "/service_discovery/aws",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAWSRegionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAWSRegionsOK), nil

}

/*
GetConsul returns one consul server

Returns one Consul server configuration by it's id.
*/
func (a *Client) GetConsul(params *GetConsulParams, authInfo runtime.ClientAuthInfoWriter) (*GetConsulOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConsulParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConsul",
		Method:             "GET",
		PathPattern:        "/service_discovery/consul/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConsulReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConsulOK), nil

}

/*
GetConsuls returns an array of all configured consul servers

Returns all configured Consul servers.
*/
func (a *Client) GetConsuls(params *GetConsulsParams, authInfo runtime.ClientAuthInfoWriter) (*GetConsulsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConsulsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConsuls",
		Method:             "GET",
		PathPattern:        "/service_discovery/consul",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConsulsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConsulsOK), nil

}

/*
ReplaceAWSRegion replaces an a w s region

Replace an AWS region configuration by its id.
*/
func (a *Client) ReplaceAWSRegion(params *ReplaceAWSRegionParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceAWSRegionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAWSRegionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceAWSRegion",
		Method:             "PUT",
		PathPattern:        "/service_discovery/aws/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceAWSRegionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceAWSRegionOK), nil

}

/*
ReplaceConsul replaces a consul server

Replaces a Consul server configuration by it's id.
*/
func (a *Client) ReplaceConsul(params *ReplaceConsulParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceConsulOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceConsulParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceConsul",
		Method:             "PUT",
		PathPattern:        "/service_discovery/consul/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceConsulReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceConsulOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
