// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package maps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new maps API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for maps API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddMapEntry adds an entry into the map file

Adds an entry into the map file.
*/
func (a *Client) AddMapEntry(params *AddMapEntryParams, authInfo runtime.ClientAuthInfoWriter) (*AddMapEntryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddMapEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addMapEntry",
		Method:             "POST",
		PathPattern:        "/services/haproxy/runtime/maps_entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddMapEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddMapEntryCreated), nil

}

/*
ClearRuntimeMap removes all map entries from the map file

Remove all map entries from the map file.
*/
func (a *Client) ClearRuntimeMap(params *ClearRuntimeMapParams, authInfo runtime.ClientAuthInfoWriter) (*ClearRuntimeMapNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClearRuntimeMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "clearRuntimeMap",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/runtime/maps/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClearRuntimeMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ClearRuntimeMapNoContent), nil

}

/*
CreateRuntimeMap creates runtime map file with its entries

Creates runtime map file with its entries.
*/
func (a *Client) CreateRuntimeMap(params *CreateRuntimeMapParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRuntimeMapCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRuntimeMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRuntimeMap",
		Method:             "POST",
		PathPattern:        "/services/haproxy/runtime/maps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRuntimeMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRuntimeMapCreated), nil

}

/*
DeleteRuntimeMapEntry deletes all the map entries from the map by its id

Delete all the map entries from the map by its id.
*/
func (a *Client) DeleteRuntimeMapEntry(params *DeleteRuntimeMapEntryParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRuntimeMapEntryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRuntimeMapEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRuntimeMapEntry",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/runtime/maps_entries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRuntimeMapEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRuntimeMapEntryNoContent), nil

}

/*
GetAllRuntimeMapFiles returns all available map files

Returns all available map files.
*/
func (a *Client) GetAllRuntimeMapFiles(params *GetAllRuntimeMapFilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllRuntimeMapFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllRuntimeMapFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllRuntimeMapFiles",
		Method:             "GET",
		PathPattern:        "/services/haproxy/runtime/maps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllRuntimeMapFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllRuntimeMapFilesOK), nil

}

/*
GetOneRuntimeMap returns one runtime map file

Returns one runtime map file.
*/
func (a *Client) GetOneRuntimeMap(params *GetOneRuntimeMapParams, authInfo runtime.ClientAuthInfoWriter) (*GetOneRuntimeMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOneRuntimeMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOneRuntimeMap",
		Method:             "GET",
		PathPattern:        "/services/haproxy/runtime/maps/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOneRuntimeMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOneRuntimeMapOK), nil

}

/*
GetRuntimeMapEntry returns one map runtime setting

Returns one map runtime setting by it's id.
*/
func (a *Client) GetRuntimeMapEntry(params *GetRuntimeMapEntryParams, authInfo runtime.ClientAuthInfoWriter) (*GetRuntimeMapEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRuntimeMapEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRuntimeMapEntry",
		Method:             "GET",
		PathPattern:        "/services/haproxy/runtime/maps_entries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRuntimeMapEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRuntimeMapEntryOK), nil

}

/*
ReplaceRuntimeMapEntry replaces the value corresponding to each id in a map

Replaces the value corresponding to each id in a map.
*/
func (a *Client) ReplaceRuntimeMapEntry(params *ReplaceRuntimeMapEntryParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceRuntimeMapEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceRuntimeMapEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceRuntimeMapEntry",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/runtime/maps_entries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceRuntimeMapEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceRuntimeMapEntryOK), nil

}

/*
ShowRuntimeMap returns one map runtime entries

Returns an array of all entries in a given runtime map file.
*/
func (a *Client) ShowRuntimeMap(params *ShowRuntimeMapParams, authInfo runtime.ClientAuthInfoWriter) (*ShowRuntimeMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowRuntimeMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "showRuntimeMap",
		Method:             "GET",
		PathPattern:        "/services/haproxy/runtime/maps_entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShowRuntimeMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ShowRuntimeMapOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
